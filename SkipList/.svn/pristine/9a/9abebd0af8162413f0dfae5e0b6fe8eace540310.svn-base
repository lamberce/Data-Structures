import java.util.ArrayList;
import java.util.Random;

/**
 * A SkipList is a randomized multi-level linked list
 * 
 * @param <T>
 *            The generic type of the list.
 */
public class SkipList<T extends Comparable<? super T>> {

	private Node root;
	private int numNodesVisited;
	private Random randomizer;

	private static int MAX_LINKS = 10;

	/**
	 * Creates a skip list with truly random numbers. We won't use this
	 * constructor for our tests.
	 */
	public SkipList() {
		this.randomizer = new Random();
		reset();
	}

	/**
	 * Creates a SkipList with a given fixed seed. This is better for testing.
	 * 
	 * @param seed
	 *            A random seed.
	 */
	public SkipList(int seed) {
		this.randomizer = new Random(seed);
		reset();
	}

	// Creates the skip list's root and end nodes and does any other
	// initialization needed.
	private void reset() {
		// TODO: implement
	}

	/**
	 * Grabs the next random integer from the array
	 * 
	 * @return 0 or 1.
	 */
	public int getRand() {
		int temp = this.randomizer.nextInt(2);
		// Uncomment to see random values generated.
		// System.out.println("Random = " + temp);
		return temp;
	}

	/**
	 * @return the root node
	 */
	public Node getRoot() {
		return this.root;
	}

	/**
	 * Inserts the elements in the array in the SkipList in order, then iterates
	 * through the list, copying them back into the array, thus sorting the
	 * array.
	 * 
	 * @param array
	 */
	public void sort(T[] array) {
		// (For the next assignment, not this one.)

		// TODO: Increase MAX_LINKS, since 10 will be too small when sorting
		// large arrays.

		this.reset();
		// TODO: finish implementing sort.

	}

	/**
	 * Inserts the given element in the list
	 * 
	 * @param e
	 * @return true if successful; false otherwise
	 */
	public boolean insert(T e) {
		// TODO: implement.
		return false;
	}

	/**
	 * Removes the given element from the list
	 * 
	 * @param e
	 * @return true if successful; false otherwise
	 */
	public boolean remove(T e) {
		// TODO: implement.
		return false;
	}

	/**
	 * @return the number of nodes visited during insertion and removal
	 */
	public int getNodesVisited() {
		return this.numNodesVisited;
	}

	@Override
	public String toString() {
		// TODO: implement.
		return null;
	}

	/**
	 * A Node holds data and links to the next node on its levels.
	 * 
	 */
	public class Node {

		private T element;
		private ArrayList<Node> links;

		// TODO: implement whatever else is needed for this class.
		// You should not add any more fields.
		/**
		 * Instantiates this node with the given element and links
		 * 
		 * @param e
		 * @param size
		 */
		public Node(T e) {
			this.element = e;
			this.links = new ArrayList<Node>();
		}

		/**
		 * Returns the list of links this node is holding
		 * 
		 * @return a list of links
		 */
		public ArrayList<Node> getLinks() {
			return this.links;
		}

		/**
		 * @return this node's element
		 */
		public T getElement() {
			return this.element;
		}
	}
}