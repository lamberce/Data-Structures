package graphs;

/**
 * This class implements an undirected graph to which edges can be added
 * randomly. It's for experimenting with the theory of random graphs, developed
 * by Paul Erdos and Alfred Renyi in 1959.
 * 
 * @author TODO: put your name here
 */
public class RandomGraph {
	// TODO: add any necessary fields and classes for your chosen representation

	/**
	 * Constructs a new graph of the given size with no edges.
	 * 
	 * @param size
	 */
	public RandomGraph(int size) {
		this(size, new int[][] {});
	}

	/**
	 * Constructs a new graph of the given size with the given edges
	 * 
	 * @param size
	 * @param edges
	 *            each element is a pair giving the indices of the two nodes to
	 *            be connected
	 */
	public RandomGraph(int size, int[][] edges) {
		// TODO: implement this constructor
	}

	/**
	 * @return the size of the largest connected component of this graph
	 */
	public int largestConnectedComponentSize() {
		// TODO: implement this method
		return -1;
	}

	/**
	 * Adds a new edge, chosen uniformly from the set of missing edges.
	 * 
	 * @throws IllegalStateException
	 *             if this.isComplete()
	 */
	public void addRandomEdge() throws IllegalStateException {
		// TODO: implement this method
	}

	/**
	 * Returns whether this graph is connected, that is, whether there is a path
	 * from any node in the graph to any other node.
	 * 
	 * @return true iff this graph is connected
	 */
	public boolean isConnected() {
		// TODO: implement this method
		return false;
	}

	/**
	 * Returns whether this graph is complete, that is, any two distinct
	 * vertices are neighbors of each other.
	 * 
	 * @return true iff this graph is complete
	 */
	public boolean isComplete() {
		// TODO: implement this method
		return false;
	}

	@Override
	public String toString() {
		/*
		 * TODO: Implement this method by replacing the super call with code to
		 * create a "reasonable" string representation of the Graph. Any
		 * representation that helps you debug the other methods is fine.
		 */
		return super.toString();
	}
}
